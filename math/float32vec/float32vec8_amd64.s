TEXT ·f32v8_addAVX(SB), $0-24
	MOVQ a+0(FP), AX
	MOVQ b+8(FP), BX
	MOVQ result+16(FP), CX
	VMOVAPS 0(AX), Y0
	VMOVAPS 0(BX), Y1
	VADDPS Y1, Y0, Y2
	VMOVAPS Y2, 0(CX)
	RET

TEXT ·f32v8_addSSE2(SB), $0-24
	MOVQ a+0(FP), AX
	MOVQ b+8(FP), BX
	MOVQ result+16(FP), CX
	MOVAPS 0(AX), X0
	MOVAPS 16(AX), X1
	MOVAPS 0(BX), X2
	MOVAPS 16(BX), X3
	ADDPS X2, X0
	ADDPS X3, X1
	MOVAPS X0, 0(CX)
	MOVAPS X1, 16(CX)
	RET

TEXT ·f32v8_subAVX(SB), $0-24
	MOVQ a+0(FP), AX
	MOVQ b+8(FP), BX
	MOVQ result+16(FP), CX
	VMOVAPS 0(AX), Y0
	VMOVAPS 0(BX), Y1
	VSUBPS Y1, Y0, Y2
	VMOVAPS Y2, 0(CX)
	RET

TEXT ·f32v8_subSSE2(SB), $0-24
	MOVQ a+0(FP), AX
	MOVQ b+8(FP), BX
	MOVQ result+16(FP), CX
	MOVAPS 0(AX), X0
	MOVAPS 16(AX), X1
	MOVAPS 0(BX), X2
	MOVAPS 16(BX), X3
	SUBPS X2, X0
	SUBPS X3, X1
	MOVAPS X0, 0(CX)
	MOVAPS X1, 16(CX)
	RET

TEXT ·f32v8_mulAVX(SB), $0-24
	MOVQ a+0(FP), AX
	MOVQ b+8(FP), BX
	MOVQ result+16(FP), CX
	VMOVAPS 0(AX), Y0
	VMOVAPS 0(BX), Y1
	VMULPS Y1, Y0, Y2
	VMOVAPS Y2, 0(CX)
	RET

TEXT ·f32v8_mulSSE2(SB), $0-24
	MOVQ a+0(FP), AX
	MOVQ b+8(FP), BX
	MOVQ result+16(FP), CX
	MOVAPS 0(AX), X0
	MOVAPS 16(AX), X1
	MOVAPS 0(BX), X2
	MOVAPS 16(BX), X3
	MULPS X2, X0
	MULPS X3, X1
	MOVAPS X0, 0(CX)
	MOVAPS X1, 16(CX)
	RET

TEXT ·f32v8_fmaFMA(SB), $0-32
	MOVQ a+0(FP), AX
	MOVQ b+8(FP), BX
	MOVQ c+16(FP), CX
	MOVQ result+24(FP), DX
	VMOVAPS 0(AX), Y0
	VMOVAPS 0(BX), Y1
	VMOVAPS 0(CX), Y2
	VFMADD132PS Y0, Y1, Y2
	VMOVAPS Y2, 0(DX)
	RET

TEXT ·f32v8_divAVX(SB), $0-24
	MOVQ a+0(FP), AX
	MOVQ b+8(FP), BX
	MOVQ result+16(FP), CX
	VMOVAPS 0(AX), Y0
	VMOVAPS 0(BX), Y1
	VDIVPS Y1, Y0, Y2
	VMOVAPS Y2, 0(CX)
	RET

TEXT ·f32v8_divSSE2(SB), $0-24
	MOVQ a+0(FP), AX
	MOVQ b+8(FP), BX
	MOVQ result+16(FP), CX
	MOVAPS 0(AX), X0
	MOVAPS 16(AX), X1
	MOVAPS 0(BX), X2
	MOVAPS 16(BX), X3
	DIVPS X2, X0
	DIVPS X3, X1
	MOVAPS X0, 0(CX)
	MOVAPS X1, 16(CX)
	RET

TEXT ·f32v8_minAVX(SB), $0-24
	MOVQ a+0(FP), AX
	MOVQ b+8(FP), BX
	MOVQ result+16(FP), CX
	VMOVAPS 0(AX), Y0
	VMOVAPS 0(BX), Y1
	VMINPS Y0, Y1, Y2
	VMOVAPS Y2, 0(CX)
	RET

TEXT ·f32v8_minSSE2(SB), $0-24
	MOVQ a+0(FP), AX
	MOVQ b+8(FP), BX
	MOVQ result+16(FP), CX
	MOVAPS 0(AX), X0
	MOVAPS 16(AX), X1
	MOVAPS 0(BX), X2
	MOVAPS 16(BX), X3
	MINPS X2, X0
	MINPS X3, X1
	MOVAPS X0, 0(CX)
	MOVAPS X1, 16(CX)
	RET

TEXT ·f32v8_maxAVX(SB), $0-24
	MOVQ a+0(FP), AX
	MOVQ b+8(FP), BX
	MOVQ result+16(FP), CX
	VMOVAPS 0(AX), Y0
	VMOVAPS 0(BX), Y1
	VMAXPS Y0, Y1, Y2
	VMOVAPS Y2, 0(CX)
	RET

TEXT ·f32v8_maxSSE2(SB), $0-24
	MOVQ a+0(FP), AX
	MOVQ b+8(FP), BX
	MOVQ result+16(FP), CX
	MOVAPS 0(AX), X0
	MOVAPS 16(AX), X1
	MOVAPS 0(BX), X2
	MOVAPS 16(BX), X3
	MAXPS X2, X0
	MAXPS X3, X1
	MOVAPS X0, 0(CX)
	MOVAPS X1, 16(CX)
	RET

TEXT ·f32v8_clampAVX(SB), $0-32
	MOVQ v+0(FP), AX
	MOVQ mn+8(FP), BX
	MOVQ mx+16(FP), CX
	MOVQ result+24(FP), DX
	VMOVAPS 0(AX), Y0
	VMOVAPS 0(BX), Y1
	VMOVAPS 0(CX), Y2
	VMAXPS Y0, Y1, Y3
	VMINPS Y2, Y3, Y4
	VMOVAPS Y4, 0(DX)
	RET

TEXT ·f32v8_clampSSE2(SB), $0-32
	MOVQ v+0(FP), AX
	MOVQ mn+8(FP), BX
	MOVQ mx+16(FP), CX
	MOVQ result+24(FP), DX
	MOVAPS 0(AX), X0
	MOVAPS 16(AX), X1
	MOVAPS 0(BX), X2
	MOVAPS 16(BX), X3
	MOVAPS 0(CX), X4
	MOVAPS 16(CX), X5
	MAXPS X2, X0
	MAXPS X3, X1
	MINPS X4, X0
	MINPS X5, X1
	MOVAPS X0, 0(DX)
	MOVAPS X1, 16(DX)
	RET

TEXT ·f32v8_ceilAVX(SB), $0-16
	MOVQ v+0(FP), AX
	MOVQ result+8(FP), BX
	VMOVAPS 0(AX), Y0
	VROUNDPS $10, Y0, Y1
	VMOVAPS Y1, 0(BX)
	RET

TEXT ·f32v8_ceilSSE41(SB), $0-24
	MOVQ v+0(FP), AX
	MOVQ result+8(FP), BX
	MOVAPS 0(AX), X0
	MOVAPS 16(AX), X1
	ROUNDPS $10, X0, X2
	ROUNDPS $10, X1, X3
	MOVAPS X2, 0(BX)
	MOVAPS X3, 16(BX)
	RET

TEXT ·f32v8_roundAVX(SB), $0-16
	MOVQ v+0(FP), AX
	MOVQ result+8(FP), BX
	VMOVAPS 0(AX), Y0
	VROUNDPS $00, Y0, Y1
	VMOVAPS Y1, 0(BX)
	RET

TEXT ·f32v8_roundSSE41(SB), $0-24
	MOVQ v+0(FP), AX
	MOVQ result+8(FP), BX
	MOVAPS 0(AX), X0
	MOVAPS 16(AX), X1
	ROUNDPS $00, X0, X2
	ROUNDPS $00, X1, X3
	MOVAPS X2, 0(BX)
	MOVAPS X3, 16(BX)
	RET

TEXT ·f32v8_floorAVX(SB), $0-16
	MOVQ v+0(FP), AX
	MOVQ result+8(FP), BX
	VMOVAPS 0(AX), Y0
	VROUNDPS $01, Y0, Y1
	VMOVAPS Y1, 0(BX)
	RET

TEXT ·f32v8_floorSSE41(SB), $0-24
	MOVQ v+0(FP), AX
	MOVQ result+8(FP), BX
	MOVAPS 0(AX), X0
	MOVAPS 16(AX), X1
	ROUNDPS $01, X0, X2
	ROUNDPS $01, X1, X3
	MOVAPS X2, 0(BX)
	MOVAPS X3, 16(BX)
	RET
